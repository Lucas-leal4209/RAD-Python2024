import psycopg2

class ConexaoBancoDados:
    def __init__(self, nome_bd, usuario, senha, host, porta):
        self.nome_bd = nome_bd
        self.usuario = usuario
        self.senha = senha
        self.host = host
        self.porta = porta

    def conectar(self):
        conn = None
        try:
            conn = psycopg2.connect(
                dbname=self.nome_bd,
                user=self.usuario,
                password=self.senha,
                host=self.host,
                port=self.porta
            )
            return conn
        except (Exception, psycopg2.DatabaseError) as erro:
            print(erro)
            return None

class Menu:
    def __init__(self, conexao_bd):
        self.conexao_bd = conexao_bd

    def exibir_menu(self):
        print("Bem-vindo ao Sistema de Gerenciamento de Notas dos Alunos!")
        print("1. Inserir Aluno")
        print("2. Inserir Nota")
        print("3. Atualizar Aluno")
        print("4. Atualizar Nota")
        print("5. Excluir Aluno")
        print("6. Excluir Nota")
        print("7. Ver Alunos")
        print("8. Ver Notas")
        print("0. Sair")

    def executar(self):
        while True:
            self.exibir_menu()
            escolha = input("Digite sua escolha: ")
            if escolha == "1":
                self.inserir_aluno()
            elif escolha == "2":
                self.inserir_nota()
            elif escolha == "3":
                self.atualizar_aluno()
            elif escolha == "4":
                self.atualizar_nota()
            elif escolha == "5":
                self.excluir_aluno()
            elif escolha == "6":
                self.excluir_nota()
            elif escolha == "7":
                self.ver_alunos()
            elif escolha == "8":
                self.ver_notas()
            elif escolha == "0":
                print("Saindo...")
                break
            else:
                print("Escolha inválida. Por favor, tente novamente.")

    def inserir_aluno(self):
        inserir_dados = InserirDados(self.conexao_bd)
        inserir_dados.inserir_aluno()

    def inserir_nota(self):
        inserir_dados = InserirDados(self.conexao_bd)
        inserir_dados.inserir_nota()

    def atualizar_aluno(self):
        atualizar_dados = AtualizarDados(self.conexao_bd)
        atualizar_dados.atualizar_aluno()

    def atualizar_nota(self):
        atualizar_dados = AtualizarDados(self.conexao_bd)
        atualizar_dados.atualizar_nota()

    def excluir_aluno(self):
        excluir_dados = ExcluirDados(self.conexao_bd)
        excluir_dados.excluir_aluno()

    def excluir_nota(self):
        excluir_dados = ExcluirDados(self.conexao_bd)
        excluir_dados.excluir_nota()

    def ver_alunos(self):
        consultar_dados = ConsultarDados(self.conexao_bd)
        consultar_dados.consultar_alunos()

    def ver_notas(self):
        consultar_dados = ConsultarDados(self.conexao_bd)
        consultar_dados.consultar_notas()

class CriarTabelas:
    def __init__(self, conexao_bd):
        self.conexao_bd = conexao_bd

    def criar_tabelas(self):
        conn = self.conexao_bd.conectar()
        if conn is not None:
            cur = conn.cursor()
            cur.execute("""
                CREATE TABLE IF NOT EXISTS alunos (
                    id SERIAL PRIMARY KEY,
                    nome VARCHAR(100),
                    matricula VARCHAR(20) UNIQUE
                )
            """)
            cur.execute("""
                CREATE TABLE IF NOT EXISTS notas (
                    id SERIAL PRIMARY KEY,
                    aluno_id INTEGER REFERENCES alunos(id),
                    disciplina VARCHAR(100),
                    nota FLOAT,
                    data DATE
                )
            """)
            conn.commit()
            print("Tabelas criadas com sucesso!")
            conn.close()
        else:
            print("Falha ao conectar ao banco de dados.")

class InserirDados:
    def __init__(self, conexao_bd):
        self.conexao_bd = conexao_bd

    def inserir_aluno(self):
        conn = self.conexao_bd.conectar()
        if conn is not None:
            cur = conn.cursor()
            nome = input("Digite o nome do aluno: ")
            matricula = input("Digite a matrícula do aluno: ")
            cur.execute("INSERT INTO alunos (nome, matricula) VALUES (%s, %s)", (nome, matricula))
            conn.commit()
            print("Aluno inserido com sucesso!")
            conn.close()
        else:
            print("Falha ao conectar ao banco de dados.")

    def inserir_nota(self):
        conn = self.conexao_bd.conectar()
        if conn is not None:
            cur = conn.cursor()
            id_aluno = int(input("Digite o ID do aluno: "))
            disciplina = input("Digite a disciplina: ")
            nota = float(input("Digite a nota: "))
            data = input("Digite a data (formato: yyyy-mm-dd): ")
            cur.execute("INSERT INTO notas (aluno_id, disciplina, nota, data) VALUES (%s, %s, %s, %s)", (id_aluno, disciplina, nota, data))
            conn.commit()
            print("Nota inserida com sucesso!")
            conn.close()
        else:
            print("Falha ao conectar ao banco de dados.")

class AtualizarDados:
    def __init__(self, conexao_bd):
        self.conexao_bd = conexao_bd

    def atualizar_aluno(self):
        conn = self.conexao_bd.conectar()
        if conn is not None:
            cur = conn.cursor()
            id_aluno = int(input("Digite o ID do aluno para atualizar: "))
            nome = input("Digite o novo nome: ")
            matricula = input("Digite a nova matrícula: ")
            cur.execute("UPDATE alunos SET nome = %s, matricula = %s WHERE id = %s", (nome, matricula, id_aluno))
            conn.commit()
            print("Aluno atualizado com sucesso!")
            conn.close()
        else:
            print("Falha ao conectar ao banco de dados.")

    def atualizar_nota(self):
        conn = self.conexao_bd.conectar()
        if conn is not None:
            cur = conn.cursor()
            id_nota = int(input("Digite o ID da nota para atualizar: "))
            disciplina = input("Digite a disciplina atualizada: ")
            nota = float(input("Digite a nota atualizada: "))
            data = input("Digite a data atualizada (formato: yyyy-mm-dd): ")
            cur.execute("UPDATE notas SET disciplina = %s, nota = %s, data = %s WHERE id = %s", (disciplina, nota, data, id_nota))
            conn.commit()
            print("Nota atualizada com sucesso
