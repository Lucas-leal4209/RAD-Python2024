# conexao.py
import psycopg2

def criar_conexao():
    try:
        conexao = psycopg2.connect(
            dbname="escola",
            user="postgres",
            password="senha",
            host="localhost",
            port="5432"
        )
        return conexao
    except psycopg2.Error as e:
        print(f"Erro ao conectar ao banco de dados: {e}")
        return None

def fechar_conexao(conexao):
    if conexao:
        conexao.close()
# modelo.py
class Aluno:
    def __init__(self, id, nome, nota):
        self.id = id
        self.nome = nome
        self.nota = nota
# dao.py
class AlunoDAO:
    def __init__(self, conexao):
        self.conexao = conexao

    def criar_tabela(self):
        cursor = self.conexao.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS alunos (
                id SERIAL PRIMARY KEY,
                nome VARCHAR(50) NOT NULL
            );
        """)
        cursor.execute("""
            ALTER TABLE alunos
            ADD COLUMN IF NOT EXISTS nota DECIMAL(4, 2) NOT NULL DEFAULT 0;
        """)
        self.conexao.commit()

    def inserir_aluno(self, aluno):
        cursor = self.conexao.cursor()
        cursor.execute("""
            INSERT INTO alunos (nome, nota) VALUES (%s, %s) RETURNING id;
        """, (aluno.nome, aluno.nota))
        aluno.id = cursor.fetchone()[0]
        self.conexao.commit()

    def consultar_alunos(self):
        cursor = self.conexao.cursor()
        cursor.execute("SELECT * FROM alunos;")
        return [Aluno(*row) for row in cursor.fetchall()]

    def atualizar_nota(self, aluno):
        cursor = self.conexao.cursor()
        cursor.execute("""
            UPDATE alunos SET nota = %s WHERE id = %s;
        """, (aluno.nota, aluno.id))
        self.conexao.commit()

    def apagar_tabela(self):
        cursor = self.conexao.cursor()
        cursor.execute("DROP TABLE IF EXISTS alunos CASCADE;")
        self.conexao.commit()

# main.py
def main():
    conexao = criar_conexao()
    if conexao:
        aluno_dao = AlunoDAO(conexao)

        while True:
            print("Menu:")
            print("1. Inserir aluno 2. Atualizar nota 3. Consultar alunos")
            print("4. Apagar tabela 5. Criar tabela 6. Sair")

            opcao = input("Escolha uma opção: ")

            if opcao == "1":
                nome = input("Informe o nome do aluno: ")
                nota = float(input("Informe a nota do aluno: "))
                aluno = Aluno(None, nome, nota)
                aluno_dao.inserir_aluno(aluno)
                print("Aluno inserido com sucesso!")

            elif opcao == "2":
                alunos = aluno_dao.consultar_alunos()
                for aluno in alunos:
                    print(f"ID: {aluno.id}, Nome: {aluno.nome}")
                id = int(input("Informe o ID do aluno: "))
                nota = float(input("Informe a nova nota do aluno: "))
                aluno = Aluno(id, None, nota)
                aluno_dao.atualizar_nota(aluno)
                print("Nota atualizada com sucesso!")

            elif opcao == "3":
                alunos = aluno_dao.consultar_alunos()
                for aluno in alunos:
                    print(f"ID: {aluno.id}, Nome: {aluno.nome}, Nota: {aluno.nota:.2f}")

            elif opcao == "4":
                aluno_dao.apagar_tabela()
                print("Tabela apagada com sucesso!")

            elif opcao == "5":
                aluno_dao.criar_tabela()
                print("Tabela criada com sucesso!")

            elif opcao == "6":
                break

            else:
                print("Opção inválida!")

if __name__ == "__main__":
    main()
